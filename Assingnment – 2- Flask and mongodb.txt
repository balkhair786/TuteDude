
Assignment 1   Linux Basics



1Q) Creating and Renaming Files/Directories
Create a directory named test_dir using mkdir.
Inside test_dir, create an empty file called example.txt.
Rename example.txt to renamed_example.txt using mv

# 1. Create a directory named test_dir
mkdir test_dir

# 2. Go inside test_dir
cd test_dir

# 3. Create an empty file called example.txt
touch example.txt

# 4. Rename example.txt to renamed_example.txt
mv example.txt renamed_example.txt

Explanation:

mkdir test_dir → makes a new directory.

cd test_dir → navigates into that directory.

touch example.txt → creates an empty file.

mv example.txt renamed_example.txt → renames the file.
-----------------------------------------------------------------------------------------
2Q) Viewing File Contents
Use cat to display the contents of /etc/passwd.
Display only the first 5 lines of /etc/passwd using head.
Display only the last 5 lines of /etc/passwd using tail.

Solutioin:

# 1. Display the entire contents of /etc/passwd
cat /etc/passwd

# 2. Display only the first 5 lines of /etc/passwd
head -n 5 /etc/passwd

# 3. Display only the last 5 lines of /etc/passwd
tail -n 5 /etc/passwd
---------------------------------------------------------------------------------------
3Q) Searching for Patterns
Use grep to find all lines containing the word "root" in /etc/passwd.

Solution:

grep "root" /etc/passwd
---------------------------------------------------------------------------------
4Q) Zipping and Unzipping
Compress the test_dir directory into a file named test_dir.zip using zip.
Unzip test_dir.zip into a new directory named unzipped_dir.

Solution:

zip -r test_dir.zip test_dir

Explanation:
zip → command to create a zip file.
-r → recursive, includes all files and subdirectories.
test_dir.zip → name of the zip archive.
test_dir → directory to compress.


unzip test_dir.zip -d unzipped_dir
Explanation:
unzip → command to extract a zip file.
-d unzipped_dir → specifies the destination directory.

5Q) Downloading Files
Use wget to download a file from a URL (e.g., https://example.com/sample.txt).

Solution:
wget https://example.com/sample.txt


6Q) Changing Permissions
Create a file named secure.txt and change its permissions to read-only for everyone using chmod.


Solution:
touch secure.txt
chmod 444 secure.txt
-----------------------------------------------------------------------------------------------------

7Q)Working with Environment Variables
Use export to set a new environment variable called MY_VAR with the value "Hello, Linux!".



Solution:
export MY_VAR="Hello, Linux!"
echo $MY_VAR
Hello, Linux!
printenv MY_VAR
-----------------------------------------------------------------------------------------












-------------------------------------------------------------------------------------
Assingnment – 2			Flask and mongodb

1Q). Create a Flask application with an /api route. When this route is accessed, it should return a JSON list. The data should be stored in a backend file, read from it, and sent as a response.

Solution:
from flask import Flask, jsonify
import json

app = Flask(__name__)

# API route
@app.route('/api', methods=['GET'])
def get_data():
    try:
        # Read data from backend file
        with open("data.json", "r") as file:
            data = json.load(file)
        return jsonify(data), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True)





2Q). Create a form on the frontend that, when submitted, inserts data into MongoDB Atlas. Upon successful submission, the user should be redirected to another page displaying the message "Data submitted successfully". If there's an error during submission, display the error on the same page without redirection.
Project Structure:

project/
│── app.py
│── templates/
│   ├── form.html
│   └── success.html


